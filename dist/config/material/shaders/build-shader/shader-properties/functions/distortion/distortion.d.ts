export declare const twisterDistortion = "\nvec4 twister( vec4 pos, float t ) {\n\tfloat st = sin(t);\n\tfloat ct = cos(t);\n\tvec4 new_pos = vec4( pos );\n\t\n\tnew_pos.x = pos.x*ct - pos.z*st;\n\tnew_pos.z = pos.x*st + pos.z*ct;\n\t\n\tnew_pos.y = pos.y;\n\tnew_pos.w = pos.w;\n\n\treturn new_pos;\n}";
export declare const smoothMod = "float smoothMod(float axis, float amp, float rad){\n    float top = cos(3.1415926535897932384626433832795 * (axis / amp)) * sin(3.1415926535897932384626433832795 * (axis / amp));\n    float bottom = pow(sin(3.1415926535897932384626433832795 * (axis / amp)), 2.0) + pow(rad, 2.0);\n    float at = atan(top / bottom);\n    return amp * (1.0 / 2.0) - (1.0 / 3.1415926535897932384626433832795) * at;\n}";
export declare const fitPosition = "float fitPosition(float unscaled, float originalMin, float originalMax, float minAllowed, float maxAllowed) {\n  return (maxAllowed - minAllowed) * (unscaled - originalMin) / (originalMax - originalMin) + minAllowed;\n}";
export declare const wavePattern = "float wavePattern(vec3 position) {\n  return fitPosition(smoothMod(position.y * uDensity, 1.0, 1.5), 0.35, 0.73, 0.0, 1.0);\n}";
export declare const displaceByNoise = "float displaceByNoise(vec3 point) {\n\tvec3 coords = point;\n\tcoords.xy += 1.0 * uTime;\n\tvec3 noisePattern = vec3(transitionalNoise(coords * 2.));\n\tfloat pattern = wavePattern(noisePattern);\n\treturn pattern;\n  }";
export declare const frostedTips = "vec4 frostedTips(vec2 vUv) {\n\tfloat displaced = displaceByNoise(vPosition);\n\tfloat colorOut = clamp((displaced - 0.5) * 10.0, 0.0, 1.0);\n\treturn vec4(uInColor * vec3(colorOut), 1.0);\n  }";
export declare const sinNoise = "vec4 sinNoise(vec2 vUv) {\n\tvec2 position = vUv * uResolution;\n\tfloat color = normSin(30.3 * position.x + interpolate(normSin(25. * position.y + 10.0), 11.0, 25.0) + \n\t\t\t      30. * position.y + interpolate(normSin(25. * position.x + 10.0), 5.0, 25.) + 2. * uTime);\n\tvec3 mixt = mix(vec3(0.0), uSinColor, (vDisplacement * 9.0));\n\tmixt = vec3(vDisplacement) * uSinBrightness;\n\treturn vec4(clamp(uSinColor * mixt, vec3(0.0), vec3(1.0)), 1.0 );\n}";
export declare const transition = "vec4 transition(vec2 uv, float progress) {\n\tvec2 v = normalize(uDirection);\n\tv /= abs(v.x) + abs(v.y);\n\tvec2 center = vec2(0.5, 0.5);\n\tfloat d = v.x * center.x + v.y * center.y;\n\tfloat m = 1.0 - smoothstep(-uSmoothness, 0.0, v.x * uv.x + v.y * uv.y - (d - 0.5 + progress * (1.0 + uSmoothness)));\n\tvec4 c1 = frostedTips((uv - 0.5) * (1.0 - m) + 0.5);\n\tvec4 c2 = sinNoise((uv - 0.5) * m + 0.5);\n\treturn mix(c1, c2, m);\n  }";
