export declare const mod289Float = "// **- // mod289 a float\nfloat mod289(float x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0; }\n";
export declare const mod289Vec3 = "// **- // Returns vector3 modulo 289 \n    vec3 mod289(vec3 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n  }";
export declare const mod289Vec4 = "// **- // Returns vector4 modulo 289 \n  vec4 mod289(vec4 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n  }\n  ";
export declare const pow2 = "float pow2 (float x) { return x*x; }";
export declare const permuteFloat = "// **- // permutates a float\nfloat permute(float x) {\n    return mod289(((x*34.0)+1.0)*x);\n}";
export declare const permuteVec4 = "// **- // permutates a vec 4\n  vec4 permute(vec4 x) {\n    return mod289(((x*34.0)+1.0)*x);\n}";
export declare const taylorInvSqrtFloat = "// **- // taylor invers sqrt for float\nfloat taylorInvSqrt(float r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}";
export declare const taylorInvSqrtVec4 = "// **- // returns the taylor inverse sqrt\n  vec4 taylorInvSqrt(vec4 r)\n  {\n    return 1.79284291400159 - 0.85373472095314 * r;\n  }\n  ";
export declare const calculateNormal = "\nvec3 calculateNormal(vec3 objectPosition) {\n  vec3 fdx = vec3(dFdx(objectPosition.x), dFdx(objectPosition.y), dFdx(objectPosition.z));\n  vec3 fdy = vec3(dFdy(objectPosition.x), dFdy(objectPosition.y), dFdy(objectPosition.z));\n  vec3 normal = normalize(cross(fdx, fdy));\n\n  if (!gl_FrontFacing) {\n      normal = -normal;\n  }\n\n  return normal;\n}\n";
export declare const hash33 = "\nvec3 hash33(vec3 p3) {\n\tp3 = fract(p3 * vec3(.1031,.11369,.13787));\n    p3 += dot(p3, p3.yxz+19.19);\n    return -1.0 + 2.0 * fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\n";
export declare const rand = "\nfloat rand(vec2 n) { \n  return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n";
export declare const random = "float random(float n) {\n\treturn fract(sin(n) * 43758.5453123);\n}";
export declare const interpolate = "float interpolate(float x, float min_x, float max_x) {\n\treturn x * max_x + (1.0 - x) * min_x;\n}\n";
export declare const normSin = "float normSin(float x) {\n\treturn (sin(x) + 1.0) / 2.0;\n}";
export declare const orthogonal = "vec3 orthogonal(vec3 v) {\n  return normalize(abs(v.x) > abs(v.z)\n    ? vec3(-v.y, v.x, 0.0)\n    : vec3(0.0, -v.z, v.y));\n}";
