"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const root_container_1 = require("../root/root-container");
const useInteractiveScene_1 = require("../../components/interactive-scene/useInteractiveScene");
const use_thread_1 = require("../../hooks/use-thread");
const useThreeJs_1 = require("../../hooks/use-three-js/useThreeJs");
const useSetWindowState_1 = require("../../compat/window-state/useSetWindowState");
const useSceneFunctions_1 = require("../../hooks/useSceneFunctions");
const context_1 = require("../../context/context");
const AppendedNodes_1 = require("../appended-nodes/AppendedNodes");
const SceneNode = (props) => ((0, jsx_runtime_1.jsxs)(context_1.SceneProvider, { children: [(0, jsx_runtime_1.jsx)(SceneNodeContent, Object.assign({}, props)), props.appendedNodes && ((0, jsx_runtime_1.jsx)(AppendedNodes_1.AppendedNodes, { appendedNodes: props.appendedNodes }))] }));
const SceneNodeContent = ({ sceneFunctions, interactionEvents = [], events, sceneData: { threeJsParams, animationConfig, lights, meshes, sceneComponents, sceneProperties, }, }) => {
    (0, useSetWindowState_1.useSetWindowState)();
    const { container, renderer, camera, currentFrameRef, orbitControls } = (0, useThreeJs_1.useThreeJs)(threeJsParams);
    const formattedSceneFunctions = (0, useSceneFunctions_1.useSceneFunctions)(sceneFunctions);
    (0, useInteractiveScene_1.useInteractiveScene)(formattedSceneFunctions, events, animationConfig, meshes, lights, sceneComponents, orbitControls, sceneProperties, interactionEvents);
    (0, use_thread_1.useThreadWithPostProcessor)(currentFrameRef, camera, renderer, []);
    return ((0, jsx_runtime_1.jsx)(root_container_1.RootContainer, { containerRef: container, sceneProperties: sceneProperties }));
};
exports.default = SceneNode;
